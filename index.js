// env vars
require("dotenv").config();
const { BOT_TOKEN, MISTRAL_API_KEY, CHAT_ID, LOGS_CHAT_ID } = process.env;

// tg bot modules
const {
    Bot,
    MemorySessionStorage,
    GrammyError,
    HttpError,
    InlineKeyboard,
    session,
} = require("grammy");
const { chatMembers } = require("@grammyjs/chat-members");
const {
    conversations,
    createConversation,
} = require("@grammyjs/conversations");
const { hydrate } = require("@grammyjs/hydrate");

// ai module
const { Mistral } = require("@mistralai/mistralai");

// db module

// store/api settings
const client = new Mistral({ apiKey: MISTRAL_API_KEY });
const adapter = new MemorySessionStorage();

const StatisticsService = require("./service/statistics.service");
StatisticsService.initDB();

const bot = new Bot(BOT_TOKEN);
bot.use(hydrate());

bot.use(
    session({
        initial() {
            // return empty object for now
            return {};
        },
    })
);

bot.use(chatMembers(adapter));
bot.use(conversations());

var bufferMsg = null;

async function spamTrigger(conversation, ctx) {
    console.log("trigger");
    // const blowUpTimer = setTimeout(async () => {
    //     if (bufferMsg !== null) {
    //         try {
    //             const message = `—ç—Ç–æ—Ç —á–µ–ª –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ø–∞–º –∏ –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –¢–†–ò–í–û–ì–ê –¢–†–ò–í–û–ì–ê`

    //             await bufferMsg.editText(message, {
    //                 reply_markup: null,
    //             });
    //             await ctx.api.deleteMessage(
    //                 ctx.chat.id,
    //                 ctx.update.message.message_id
    //             );
    //             return;
    //         } catch (error) {
    //             return;
    //             // Ignore errors, since the message may have already been deleted
    //         }
    //         bufferMsg = null;
    //     }
    //     return

    // }, 10000);

    // const response = await conversation.waitFrom(ctx.from.id);

    // const btnContext = response.update.callback_query;
    // if (btnContext) {
    //     try {
    //         await response.answerCallbackQuery();
    //         await ctx.api.deleteMessage(
    //             ctx.chat.id,
    //             btnContext.message.message_id
    //         );
    //         return;
    //         clearTimeout(blowUpTimer);
    //         bufferMsg = null;
    //     } catch (error) {
    //         return;
    //         // Ignore errors, since the message may have already been deleted
    //     }
    //     return;
    // }

    // if (btnContext.from.id === ctx.from.id && bufferMsg !== null) {
    // }

    return;
}

bot.use(createConversation(spamTrigger));

const instruction = `
–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç–∞—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º –∏–ª–∏ –Ω–µ—Ç, —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏.

–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:

1. –Æ–º–æ—Ä –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:
   - –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —à—É—Ç–∫–∏, –º–µ–º—ã, –∏–ª–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–ø–∞–º–æ–º.
   - –ü—Ä–∏–º–µ—Ä: "–£—Å—Ç—Ä–æ—é—Å—å –Ω–∞ –≥–∞–ª–µ—Ä—É, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ—Ä–º–∏—Ç—å –±—É–¥—É—Ç –≤–∫—É—Å–Ω–æ üòÑ".

2. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ:
   - –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä—è–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏, –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–ø–∞–º, –µ—Å–ª–∏ –≤ –Ω–∏—Ö –Ω–µ—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —é–º–æ—Ä–∞.
   - –ü—Ä–∏–º–µ—Ä: "–¢—Ä–µ–±—É—é—Ç—Å—è –ª—é–¥–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–∫—É, 500$ –≤ –Ω–µ–¥–µ–ª—é. –ü–∏—à–∏—Ç–µ –≤ –õ–°." ‚Äî —ç—Ç–æ —Å–ø–∞–º.
   - –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞—Ä—å–µ—Ä–µ –±–µ–∑ —é–º–æ—Ä–∞, –Ω–æ –±–µ–∑ —è–≤–Ω—ã—Ö –ø—Ä–∏–∑—ã–≤–æ–≤, –µ–≥–æ –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Å–ø–∞–º–æ–º.
   - –ü—Ä–∏–º–µ—Ä: "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–∏—Å–∞—Ç—å –≤ CV –≥–æ–¥–∞ –æ–ø—ã—Ç–∞, —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π."

3. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ:
   - –í–∞–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è/—Å–æ–≤–µ—Ç –∏–ª–∏ —à—É—Ç–∫–∞, –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º, –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º.
   - –°–ø–∞–º–æ–º —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä—è–º—ã–º–∏ –ø—Ä–∏–∑—ã–≤–∞–º–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É, –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ "–≤—ã—Å–æ–∫–æ–º –∑–∞—Ä–∞–±–æ—Ç–∫–µ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è".
   - –ü—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞: "–ó–∞—Ä–∞–±–æ—Ç–∞–π 1000$ –≤ –Ω–µ–¥–µ–ª—é, –≤—Å–µ–≥–æ 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å. –ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!"

4. –¢–æ–Ω –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
   - –°–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º –∏–ª–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–º —Å—Ç–∏–ª–µ, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ "–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∞–º–æ–º.
   - –î—Ä—É–∂–µ—Å–∫–∏–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –¥–∞–∂–µ –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∫–∞—Ä—å–µ—Ä—ã, —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º.
   - –ü—Ä–∏–º–µ—Ä –¥—Ä—É–∂–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞: "–õ—É—á—à–µ –Ω–µ –¥—É–º–∞–π –æ –¥–µ–Ω—å–≥–∞—Ö, –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä–µ—à—å –æ–ø—ã—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∫–∞—á–∞–π —Å–∫–∏–ª–ª—ã."

5. –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ:
   - –°–æ–æ–±—â–µ–Ω–∏—è —Å —è–≤–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è "–ª—ë–≥–∫–∏—Ö –¥–µ–Ω–µ–≥" –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã, –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ —Å–ø–∞–º.
   - –ü—Ä–∏–º–µ—Ä: "–û–ø–ª–∞—Ç–∞ –æ—Ç 1000$ –≤ –Ω–µ–¥–µ–ª—é, –æ–±—É—á–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —Ä–∞–±–æ—Ç–∞ –≤—Å–µ–≥–æ 2-3 —á–∞—Å–∞ –≤ –¥–µ–Ω—å." ‚Äî —ç—Ç–æ —Å–ø–∞–º.

6. –°—Å—ã–ª–∫–∏:
   - –ù–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–º —Å–ø–∞–º–∞. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –º–µ–º–∞–º–∏ –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, —ç—Ç–æ –Ω–µ —Å–ø–∞–º.
   - –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –ø—Ä–∏–∑—ã–≤–æ–º –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–ø–∞–º.

–§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞:

{
  "is_spam": true/false,
  "confidence": 0-100,
  "reason": "–ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"
}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–ø–∞–º, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—è –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ç–æ–Ω, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —é–º–æ—Ä–∞, —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å —à—É—Ç–∫–∏, –¥—Ä—É–∂–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
`;

async function checkMessageByAI(message) {
    try {
        const prompt = instruction + "\n" + message;

        const chatResponse = await client.chat.complete({
            model: "mistral-large-latest",
            messages: [
                {
                    role: "user",
                    content:
                        prompt +
                        "Send response in JSON and only JSON format. WITHOUT MARKDOWN FORMATTING. Avoid backticks. Only JSON. If u give me response like that ```json response``` i will kill myself right fucking now",
                },
            ],
            response_format: { type: "json_object" },
        });

        let response = chatResponse?.choices[0]?.message.content;
        if (response.startsWith("```json") && response.endsWith("```")) {
            response = response.slice(7, -3).trim();
        }
        response = JSON.parse(response);
        return response;
    } catch (error) {
        console.error(error);
    }
}

bot.on("message", async (ctx) => {
    await StatisticsService.insertMessage(ctx.from.id, ctx.message.message_id)

    if (
        typeof ctx.message.text == "string" &&
        ctx.message.text === "–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –±–æ—Ç–∞"
    ) {
        const { stats, allNotBannedSpammers, allBannedSpammers } =
            await StatisticsService.getStats();
        const totalSpammers =
            allBannedSpammers.length + allNotBannedSpammers.length;
        let message = "```\n";
        message += "| –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞                     | –ó–Ω–∞—á–µ–Ω–∏–µ \n";
        message += "|--------------------------------|----------\n";
        message += `| –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫                 | ${stats.howMuchChecks
            .toString()
            .padStart(4)} \n`;
        message += `| –í—Å–µ–≥–æ —Å–ø–∞–º–∞                    | ${stats.howMuchSpam
            .toString()
            .padStart(4)} \n`;
        message += `| –í—Å–µ–≥–æ –ù–ï —Å–ø–∞–º–∞                 | ${stats.howMuchMiss
            .toString()
            .padStart(4)} \n`;
        message += `| –í—Å–µ–≥–æ —Å–ø–∞–º–µ—Ä–æ–≤                 | ${totalSpammers
            .toString()
            .padStart(4)} \n`;
        message += `| –í—Å–µ–≥–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤      | ${allBannedSpammers.length
            .toString()
            .padStart(4)} \n`;
        message += `| –í—Å–µ–≥–æ –ù–ï–∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤    | ${allNotBannedSpammers.length
            .toString()
            .padStart(4)} \n`;
        message += "```";

        await ctx.reply(message, { parse_mode: "Markdown" });
        return;
    }

    const messages = await StatisticsService.getUserMessages(ctx.from.id)
    if (
        typeof ctx.message.text == "string" &&
        ctx.message.text.length > 50 &&
        messages.length < 50
        // && ctx.chat.id == CHAT_ID
    ) {
        await StatisticsService.incChecks();

        const aiResponse = (await checkMessageByAI(ctx.message.text)) || false;
        console.log(aiResponse);

        if (aiResponse?.confidence >= 75 && aiResponse?.is_spam) {
            await StatisticsService.markUserAsSpammer(ctx.from.id);
            await StatisticsService.incSpam();

            const keyboard = new InlineKeyboard()
                .text("–ó–∞–±–∞–Ω–∏—Ç—å",`ban_${ctx.from.id}`)
                .text("–ü—Ä–æ—Å—Ç–∏—Ç—å",`forgive_${ctx.from.id}`);
            // let message = "";
            // message += "message: " + ctx.message.text;
            let message = `<blockquote>>> user: <a href="tg://user?id=${ctx.from.id}">${ctx.from.first_name}</a> \n>> message: <span class="tg-spoiler">${ctx.message.text}</span></blockquote> <blockquote expandable>>> confidence: ${aiResponse.confidence}\n>> reason: ${aiResponse.reason}</blockquote>`;

            // await ctx.conversation.enter("spamTrigger");

            await bot.api.sendMessage(LOGS_CHAT_ID, message, {parse_mode: "HTML", reply_markup: keyboard})

            // await bot.api.sendMessage(LOGS_CHAT_ID, message, {
            //     // reply_parameters: { message_id: ctx.msg.message_id },
            //     parse_mode: "Markdown",
            // });
        } else {
            await StatisticsService.incMisses();
        }

        console.log(
            `${aiResponse?.confidency}: ${ctx.from.id}:\n${ctx.message.text}`
        );
    }
});


bot.on("callback_query:data", async (ctx) => {

    const chat_member = await bot.api.getChatMember(CHAT_ID, ctx.from.id)
    if (chat_member.status !== 'administrator') return await ctx.answerCallbackQuery("–ø–æ—à–µ–ª –Ω–∞—Ö—É–π"); 

    const btnData = ctx.callbackQuery.data.split("_")
    
    // ahaha start
    const spamLogMsg = ctx.callbackQuery.message.text.split(">>")
    const username = spamLogMsg[1].slice(7, -2);
    const text = spamLogMsg[2].slice(10, -1)
    let message = `<blockquote expandable>>> user: <a href="tg://user?id=${btnData[1]}">${username}</a> \n>> message: <span class="tg-spoiler">${text}</span></blockquote> <blockquote expandable>>> ${spamLogMsg[3]}>>${spamLogMsg[4]}</blockquote>`;
    // ahaha end

    if (btnData[0] === 'forgive') {
        // FUCKING NOTHING 
        message += "–ü—Ä–æ—â–µ–Ω"
    } else if (btnData[0] === 'ban') {
        await ctx.api.banChatMember(CHAT_ID, btnData[1], {until_date: 0, revoke_messages: true})
        const messages = await StatisticsService.getUserMessages(btnData[1])
        messages.forEach(async (message) => {
            await ctx.api.deleteMessage(CHAT_ID, message.message_id)
        })
        message += "–ó–∞–±–∞–Ω–µ–Ω"
    }
    await ctx.callbackQuery.message.editText(message, {
        reply_markup: null,
        parse_mode: "HTML"
    })
    await ctx.answerCallbackQuery(); 
  });

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}`);

    const e = err.error;
    if (e instanceof GrammyError) {
        console.error(`Error in request: ${e.description}`);
    } else if (e instanceof HttpError) {
        console.error(`Could not connect to Telegram: ${e}`);
    } else {
        console.error(`Unknown error: ${e}`);
    }
});

bot.on("callback_query", async (ctx) => {
    await ctx.answerCallbackQuery();
});

bot.start({
    allowed_updates: ["chat_member", "message", "callback_query"],
});
